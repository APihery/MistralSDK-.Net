using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace MistralSDK.ChatCompletion
{
    /// <summary>
    /// Represents a successful response from the Mistral AI chat completion API.
    /// </summary>
    public class ChatCompletionResponse
    {
        /// <summary>
        /// Gets or sets the unique identifier for the completion request.
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the object type. Always "chat.completion" for chat completions.
        /// </summary>
        [JsonPropertyName("object")]
        public string Object { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the model identifier used for the completion.
        /// </summary>
        [JsonPropertyName("model")]
        public string Model { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the timestamp when the completion was created (Unix timestamp).
        /// </summary>
        [JsonPropertyName("created")]
        public long Created { get; set; }

        /// <summary>
        /// Gets or sets the list of completion choices generated by the model.
        /// </summary>
        [JsonPropertyName("choices")]
        public List<ChatCompletionChoice> Choices { get; set; } = new List<ChatCompletionChoice>();

        /// <summary>
        /// Gets or sets the token usage information for the request.
        /// </summary>
        [JsonPropertyName("usage")]
        public UsageInfo? Usage { get; set; }

        /// <summary>
        /// Gets the first choice from the completion response.
        /// </summary>
        /// <returns>The first choice, or null if no choices are available.</returns>
        public ChatCompletionChoice? GetFirstChoice()
        {
            return Choices?.Count > 0 ? Choices[0] : null;
        }

        /// <summary>
        /// Gets the content of the first choice message.
        /// </summary>
        /// <returns>The content of the first message, or empty string if not available.</returns>
        public string GetFirstChoiceContent()
        {
            return GetFirstChoice()?.Message?.Content ?? string.Empty;
        }
    }

    /// <summary>
    /// Represents token usage information for a completion request.
    /// </summary>
    public class UsageInfo
    {
        /// <summary>
        /// Gets or sets the number of tokens in the prompt.
        /// </summary>
        [JsonPropertyName("prompt_tokens")]
        public int PromptTokens { get; set; }

        /// <summary>
        /// Gets or sets the number of tokens in the completion.
        /// </summary>
        [JsonPropertyName("completion_tokens")]
        public int CompletionTokens { get; set; }

        /// <summary>
        /// Gets or sets the total number of tokens used (prompt + completion).
        /// </summary>
        [JsonPropertyName("total_tokens")]
        public int TotalTokens { get; set; }

        /// <summary>
        /// Gets the total cost in USD based on the model and token usage.
        /// </summary>
        /// <param name="model">The model used for the completion.</param>
        /// <returns>The estimated cost in USD.</returns>
        public decimal GetEstimatedCost(string model)
        {
            // Pricing per 1M tokens (as of 2024)
            var pricing = model.ToLower() switch
            {
                "mistral-tiny" => (0.14m, 0.42m),      // (input, output) per 1M tokens
                "mistral-small" => (0.6m, 1.8m),
                "mistral-medium" => (2.5m, 7.5m),
                "mistral-large" => (6.0m, 18.0m),
                _ => (0.14m, 0.42m) // Default to tiny pricing
            };

            var inputCost = (PromptTokens / 1_000_000.0m) * pricing.Item1;
            var outputCost = (CompletionTokens / 1_000_000.0m) * pricing.Item2;
            
            return inputCost + outputCost;
        }
    }

    /// <summary>
    /// Represents a single completion choice from the model.
    /// </summary>
    public class ChatCompletionChoice
    {
        /// <summary>
        /// Gets or sets the index of this choice in the response.
        /// </summary>
        [JsonPropertyName("index")]
        public int Index { get; set; }

        /// <summary>
        /// Gets or sets the message content for this choice.
        /// </summary>
        [JsonPropertyName("message")]
        public MessageResponse? Message { get; set; }

        /// <summary>
        /// Gets or sets the reason why the completion finished.
        /// Common values: "stop", "length", "content_filter".
        /// </summary>
        [JsonPropertyName("finish_reason")]
        public string? FinishReason { get; set; }

        /// <summary>
        /// Gets or sets the log probability information for this choice (if requested).
        /// </summary>
        [JsonPropertyName("logprobs")]
        public object? LogProbs { get; set; }
    }

    /// <summary>
    /// Represents a message in the completion response.
    /// </summary>
    public class MessageResponse
    {
        /// <summary>
        /// Gets or sets the role of the message sender.
        /// For completions, this is typically "assistant".
        /// </summary>
        [JsonPropertyName("role")]
        public string Role { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the content of the message.
        /// This is the actual text generated by the model.
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the tool calls made by the model (if any).
        /// Used when the model decides to call functions.
        /// </summary>
        [JsonPropertyName("tool_calls")]
        public List<ToolCall>? ToolCalls { get; set; }

        /// <summary>
        /// Gets or sets whether this message is a prefix.
        /// Used in streaming responses.
        /// </summary>
        [JsonPropertyName("prefix")]
        public bool Prefix { get; set; }
    }

    /// <summary>
    /// Represents a tool call made by the model.
    /// </summary>
    public class ToolCall
    {
        /// <summary>
        /// Gets or sets the unique identifier for this tool call.
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the type of tool being called.
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the function call details.
        /// </summary>
        [JsonPropertyName("function")]
        public Function? Function { get; set; }

        /// <summary>
        /// Gets or sets the index of this tool call in the sequence.
        /// </summary>
        [JsonPropertyName("index")]
        public int Index { get; set; }
    }

    /// <summary>
    /// Represents a function call within a tool call.
    /// </summary>
    public class Function
    {
        /// <summary>
        /// Gets or sets the name of the function to call.
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the arguments for the function call as a JSON string.
        /// </summary>
        [JsonPropertyName("arguments")]
        public string Arguments { get; set; } = string.Empty;
    }

    /// <summary>
    /// Provides constants for finish reasons.
    /// </summary>
    public static class FinishReasons
    {
        /// <summary>
        /// The model reached a natural stopping point.
        /// </summary>
        public const string Stop = "stop";

        /// <summary>
        /// The model reached the maximum token limit.
        /// </summary>
        public const string Length = "length";

        /// <summary>
        /// The content was filtered due to safety concerns.
        /// </summary>
        public const string ContentFilter = "content_filter";

        /// <summary>
        /// The model made a tool call.
        /// </summary>
        public const string ToolCalls = "tool_calls";
    }
}
